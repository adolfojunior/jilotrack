<?xml version="1.0" encoding="UTF-8"?>
<taglib version="2.1" xmlns="http://java.sun.com/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd">
 <description>jCompany Tag-File Core Library</description>
 <display-name>jCompany Core</display-name>
 <tlib-version>5.1.0</tlib-version>
 <short-name>plcf</short-name>
 <uri>http://www.powerlogic.com.br/plcf</uri>
 <tag>
  <name>tituloExclusao</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcTitleExclusionTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Imagem para exclusao</description>
   <name>caminhoImagem</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set.
              For accessibility reasons, this functionality is not supported in
              screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt; An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>valueAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the ID of the component that this component
refers to</description>
   <name>for</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>celula</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcCellTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>This attribute should be used to provide an abbreviated form of
             the cell's content, and may be rendered by user agents when
             appropriate in place of the cell's content. Abbreviated names
             should be short since user agents may render them repeatedly
             (especially if this cell is a header cell).</description>
   <name>shortText</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the horizontal alignment of the grid row elements.
              The acceptable values are "center", "left", "right", "start", and "end".</description>
   <name>halign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the vertical alignment of the grid row elements.
              The acceptable values are "middle", "top", and "bottom".</description>
   <name>valign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the preferred width of the enclosed layout elements.</description>
   <name>width</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the preferred height of the enclosed layout elements.</description>
   <name>height</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of cells wide the child layout element will be.</description>
   <name>columnSpan</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of cells high the child layout element will be.</description>
   <name>rowSpan</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether automatic text wrapping should be disabled for
              this cell.</description>
   <name>wrappingDisabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Indicates which table cells are the headers for this cell. This
             attribute is used by screen readers to associate header
             information with data cells. This must be set to a
             space-separated list of IDs. Each ID must be the ID of a
             pertinent header cell.</description>
   <name>headers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indicates whether or not this table cell is a header cell or a data cell.
        Setting this attribute to 'true' will mark this cell as a header cell.</description>
   <name>header</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS style class of the bean.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>escondido</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcHiddenTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>tabela</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcTableTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o titulo do componente Ex: 'titulo' ou minhaClasseCS</description>
   <name>classeTituloCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>C√≥digo javascript a ser executado no momento em que se tabula no √∫ltimo campo dentro da tabela. Renderiza uma linha (tr) adicional, com campo de tamanho/largura 0, que dispara o c√≥digo declarado no seu 'onfocus'</description>
   <name>aoSair</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>exibeEmTabFolder</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>fragmento</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the preferred total width of the layout.</description>
   <name>width</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the horizontal alignment of the table.
              The acceptable values are "center", "left", "right", "start", and "end".</description>
   <name>halign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the spacing between cells.</description>
   <name>cellSpacing</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the spacing within cells.</description>
   <name>cellPadding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the border width around each cell.</description>
   <name>borderWidth</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>The summary of the table's purpose and structure
             for user agents rendering to non-visual media. This attribute
             must be set if this element is being used to implement a data
             table (instead of a layout table).</description>
   <name>summary</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS style class of the bean.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>linha</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcLineTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the default horizontal alignment of cells in this row.
              The acceptable values are "center", "left", "right", "start", and "end".</description>
   <name>halign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the default vertical alignment of cells in this row.
              The acceptable values are "middle", "top", and "bottom".</description>
   <name>valign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the preferred total width of the layout.
              This attribute is ignored when the row layout is inside
              of a table layout.</description>
   <name>width</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS style class of the bean.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>texto</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcTextTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>N√∫mero de ordem do detalhe corrente para auxilio em logicas de teste automatizado Ex: 1</description>
   <name>numDet</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Formatos de entrada de dados para o campo, podendo ser um dentre os seguintes: [numerico|alfanumerico|ALFANUMERICO|alfabetico|ALFABETICO] alfanumerico: Aceita letras min√∫sculas e numeros. ALFANUMERICO: Aceita letras mai√∫sculas e numeros. alfabetico: Aceita letras min√∫sculas. ALFABETICO: Aceita letras mai√∫sculas. Ex: numerico</description>
   <name>formato</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica a ordem que dos tabs entre campos. Ex: tabIndex="1"</description>
   <name>tabIndex</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
   <name>wrap</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
   <name>secret</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component:
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker,
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes.
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>oid</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcOidTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 	0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>the value of the component</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>N√∫mero de ordem do detalhe corrente para auxilio em logicas de teste automatizado Ex: 1</description>
   <name>numDet</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Informa se ao digitar um valor para o campo oid na tela de pesquisa e teclar TAB, j√° recupera o registro referente a este Id automaticamente. (Similar ao clicar no pesquisar com campo oid informado) Ex: S</description>
   <name>autoRecuperacao</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  daqui para frente sao originais do Trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <!-- 
    <attribute>
      <description>the value of the component.  If the EL binding
		for the "value" points to a bean property with a getter but no setter, and
		this is an editable component, the component will be rendered 
		in read-only mode.
	  </description>
      <name>value</name>
      <deferred-value/>
    </attribute>
    -->
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
   <name>wrap</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
   <name>secret</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component:
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker,
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes.
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>exibe</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcShowTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>the value of the component</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>chavePrimaria</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>enumI18n</description>
   <name>enumI18n</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <!-- 
    <attribute>
      <description>the value of the component.  If the EL binding
		for the "value" points to a bean property with a getter but no setter, and
		this is an editable component, the component will be rendered 
		in read-only mode.
	  </description>
      <name>value</name>
      <deferred-value/>
    </attribute>
    -->
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set.
              For accessibility reasons, this functionality is not supported in
              screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt; An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>valueAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the ID of the component that this component
refers to</description>
   <name>for</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>titulo</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcTitleTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar somente se 'propOrdenacao' for informada. √â o alias no HQL da propriedade a ser ordenada. Olhar HQL de pesquisa no anotation QueredName do VO da pesquisa Ex: obj ou meuAlias</description>
   <name>alias</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira criar um link para escolher como a pesquisa deve ser ordenada. √â a propriedade que ser√° utilizada para ordenar o resultado da pesquisa. Se for informado ser√° renderizada uma tag-file propOrdenacao.tag, utilizando as outras propriedades 'ordem', 'alias'. Ex: nome ou minhaPropriedade.</description>
   <name>propOrdenacao</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar somente se 'propOrdenacao' for informada. √â a ordem que ser√° colocado a propriedade na cl√°usula order by do HQL da pesquisa. Olhar HQL de pesquisa no anotation QueredName do VO da pesquisa Ex: 1</description>
   <name>ordem</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Id para o componente span do html que vai ser criado. Este span √© usado nas rotinas javaScript ajax. Ex: meuIdAjax</description>
   <name>ajaxIdUnico</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set.
              For accessibility reasons, this functionality is not supported in
              screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt; An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>valueAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the ID of the component that this component
refers to</description>
   <name>for</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>data</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcDateTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se o calendariio vai ser I18N. Ex: S" </description>
   <name>internacionalizado</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
   <name>action</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>java.lang.String myMethod()</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to an action listener</description>
   <name>actionListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ActionEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to an return listener</description>
   <name>returnListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.ReturnEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The id of the chooseDate component which can be used to
              pick the Date value for this inputDate. Use the same syntax as partialTriggers
          if the components are separated by Naming Containers.</description>
   <name>chooseId</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          value will be derived from the current converter, if one
   is attached.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "columns" displayed.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>comboDinamico</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcDynamicComboTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Classe java referente a cole√ß√£o dos itens do lookup ou radio group. Se for n√£o de dominio discreto, ou seja, dom√≠nio dinamico, Esta classe √© uma classe mantida em cache pelo jCompany e deve estar configurada no web.xml e na action do caso de uso no struts-config.xml Ex: para dominio discreto: 'Sexo' , para dominio din√¢mico: 'AreaProfissionalVO' ou minhaClasseJava</description>
   <name>dominio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>exibeBranco</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>"Propriedade da cole√ß√£o (parametro dominio), que vai ser exibida em cada item da lista (text). Ex: descricao ou minhaPropridade"</description>
   <name>propRotulo</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se o calendariio vai ser I18N. Ex: S" </description>
   <name>internacionalizado</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Se for utilizar a funcionalidade de 'combosAninhados' (atualizar um campo conforme valor do outro), informar as propriedades ligadas aos comboboxs que ser√£o atualizados [separados por ','] Ex: cidade ou minhaPropriedade </description>
   <name>navegacaoParaCampos</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Se o combodinamico √© uma combo que vai ser atualizado por outro campo, deve-se informar 'S'</description>
   <name>comboAninhado</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou SC)Indica se √© para renderizar o bot√£o de atualiza 'A' ou 'AC' respectivamente, junto ao campo do combobox. O bot√£o 'A' atualiza a lista do combobox de acordo com os dados que j√° est√£o em cache, enquanto o bot√£o 'AC' recupero os dados do banco e atualiza a cache.</description>
   <name>botaoAtualiza</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The label for the option that represents a value of null, meaning nothing is selected. If unselectedLabel is not set and if the component does not have a selected value, then an option with an empty string as the label and value is rendered as the first option in the choice box (if there isn't an empty option already defined). Once an option has been successfully selected, and if unselectedLabel is not set, then the empty option will not be rendered.</description>
   <name>unselectedLabel</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client.
        Therefore, when valuePassThru is false,
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set
        valuePassThru to true. This will pass the values through to the client,
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
   <name>valuePassThru</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>comboEstatico</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcStaticComboTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Classe java referente a lista dos itens do lookup ou radio group. A lista √© Est√°tica, com base em um java.lang.Enum</description>
   <name>dominio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>exibeBranco</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>"Propriedade da cole√ß√£o (parametro dominio), que vai ser exibida em cada item da lista (text). Ex: descricao ou minhaPropridade"</description>
   <name>propRotulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se o calendariio vai ser I18N. Ex: S" </description>
   <name>internacionalizado</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The label for the option that represents a value of null, meaning nothing is selected. If unselectedLabel is not set and if the component does not have a selected value, then an option with an empty string as the label and value is rendered as the first option in the choice box (if there isn't an empty option already defined). Once an option has been successfully selected, and if unselectedLabel is not set, then the empty option will not be rendered.</description>
   <name>unselectedLabel</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client.
        Therefore, when valuePassThru is false,
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set
        valuePassThru to true. This will pass the values through to the client,
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
   <name>valuePassThru</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <description>Renderiza uma linha da sele√ß√£o</description>
  <name>linhaSelecao</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcLineSelectionTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Action da Struts a ser chamada pelo link. Ex: usuarioselpopup ou minhaAction</description>
   <name>action</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>√â o par√¢metro chPlc= o valor do oid do registro selecionado. √â utilizado pelas l√≥gicas do jcompany para editar o objeto com oid deste par√¢metro. Importante o default √© informar item.linkEdicaoPlc  Ex: item.linkEdicaoPlc</description>
   <name>linkEdicao</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Se a tela de sele√ß√£o for usada para sele√ß√£o popup, esta √© a propriedade que vai ser devolvida no devolveSelecao, sendo propAgregada#id,propAgregadaLookup#item  Ex: estado ou minhaPropAgregada</description>
   <name>propAgregada</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Se a tela de sele√ß√£o for usada para sele√ß√£o popup, esta √© a propriedade que vai ser devolvida no devolveSelecao, sendo propAgregada#id,propAgregadaLookup#item  Ex: estado ou minhaPropAgregada</description>
   <name>propAgregadaCampo</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>√â o par√¢metro chPlc= o valor do oid do registro selecionado. √â utilizado pela l√≥gica CRUD TABULAR do jcompany para editar o objeto com oid deste par√¢metro. Importante o default √© informar item.linkEdicaoAvancadoPlc  Ex: item.linkEdicaoAvancadoPlc</description>
   <name>linkEdicaoCT</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Montagem do texto a ser visualizado.</description>
   <name>toolTip</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Caso o Id n√£o seja o default 'id', ent√£o informar o valor da propriedade referente ao id Espec√≠fico, Exemplo rowId do oracle. Ex: ${item.id} ou ${item.rowId}</description>
   <name>idEspecifico</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the default horizontal alignment of cells in this row.
              The acceptable values are "center", "left", "right", "start", and "end".</description>
   <name>halign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the default vertical alignment of cells in this row.
              The acceptable values are "middle", "top", and "bottom".</description>
   <name>valign</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the preferred total width of the layout.
              This attribute is ignored when the row layout is inside
              of a table layout.</description>
   <name>width</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS style class of the bean.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <description>O commandButton controle cria um bot√£o representando um UIXCommand.</description>
  <name>botaoAcao</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcButtonTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>the identifier for the component</description>
   <name>idPlc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>acao</description>
   <name>acao</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da colecao se o botao tiver rela√ß√£o com detalhes ou sub-detalhes</description>
   <name>detalhe</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>destino</description>
   <name>destino</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>label</description>
   <name>label</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>botaoArrayID</description>
   <name>botaoArrayID</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>urlIcone</description>
   <name>urlIcone</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>hotKey</description>
   <name>hotKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>true ou false, indicando se deve ou n√£o ser validado o formulario. Default:true</description>
   <name>validaForm</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>true ou false, indicando se deve ou n√£o ser validado o formulario. Default:true</description>
   <name>limpaForm</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Evento onClick</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave para mensagem de alerta para bot√£o excluir.</description>
   <name>alertaExcluir</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&gt;Chave para mensagem de alerta para bot√£o excluir detalhe.</description>
   <name>alertaExcluirDetalhe</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.</description>
   <name>action</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>java.lang.String myMethod()</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to an action listener</description>
   <name>actionListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ActionEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
   <name>returnListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.ReturnEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a launch listener</description>
   <name>launchListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.LaunchEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the textual label of the button.</description>
   <name>text</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the button should be disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>textAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the
              same page of output, the rendering user agent will cycle among
              the elements accessed by the similar keys. Note that user agents
              are inconsistent about dealing with two links having same access
              key, and so the cycling behavior is dependent on what the user agent
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.</description>
   <name>partialSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>If set to TRUE the component will start blocking user input when the
     action is initiated. The blocking will stop when a response is received
     from the server.</description>
   <name>blocking</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>An URL to an image to use for an icon displayed in the button.</description>
   <name>icon</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!-- 
    <attribute>
      <description>an onclick Javascript handler.</description>
      <name>onclick</name>
      <deferred-value/>
    </attribute>
    -->
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indicates whether processes launched by this command should be
        launched in a secondary dialog window. 'useWindow' requires that the "action"
        attribute start with "dialog:". Set useWindow to 'false' for the outcome of
        the action to be targeted to the existing window.</description>
   <name>useWindow</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Height of the window, if this command is used to launch a window.</description>
   <name>windowHeight</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Width of the window, if this command is used to launch a window.</description>
   <name>windowWidth</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>area</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcAreaTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 	0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica a quantidade de linhas que o campo de entrada ter√°. Se n√£o for informado o default √© 3 Ex: 5</description>
   <name>numLinhas</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S"</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Formatos de entrada de dados para o campo, podendo ser um dentre  os seguintes: [numerico|alfanumerico|ALFANUMERICO|alfabetico|ALFABETICO] alfanumerico: Aceita letras min√∫sculas e numeros. ALFANUMERICO: Aceita letras mai√∫sculas e numeros. alfabetico: Aceita letras min√∫sculas. ALFABETICO: Aceita letras mai√∫sculas. Ex: numerico</description>
   <name>formato</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
   <name>wrap</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
   <name>secret</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component:
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker,
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes.
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <!-- 
    <attribute>
      <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
      <name>riaUsa</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    -->
 </tag>
 <tag>
  <name>caixaMarcacao</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcSelectionBoxTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Texto a ser exibido em frente ao checkbox. Ex: Ativo</description>
   <name>texto</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do textoa ser exibido em frente ao checkbox. Ex: label.ativo</description>
   <name>textoChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Valor a ser gravado quando o checkbox estiver marcado. O default √© S. Ex: S</description>
   <name>valorMarcado</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Valor a ser gravado quando o checkbox n√£o estiver marcado. O default √© N. Ex: N</description>
   <name>valorDesmarcado</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n.  Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 	0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.</description>
   <name>selected</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the text value of the checkbox.</description>
   <name>text</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to this checkbox.
          For accessibility reasons, this functionality is not supported in
          screen reader mode.
          &lt;p&gt;
            If the same access key appears in multiple locations in the
            same page of output, the rendering user agent will cycle
            among the elements accessed by the similar keys.
          &lt;/p&gt;&lt;p&gt;
            This attribute is sometimes referred to as the "mnemonic".
          &lt;/p&gt;&lt;p&gt;
            The character specified by this attribute
            &lt;strong&gt;must&lt;/strong&gt;exist in the
            &lt;code&gt;text&lt;/code&gt;attribute of this selectBooleanCheckbox instance.
            If it does not, the user will receive no visual indication of
            the existence of the accessKey.
            &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
          and "accessKey" attributes from a single value, using
          conventional ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the text to "Text" and the access key to 'e'.
          &lt;/p&gt;&lt;/html&gt;</description>
   <name>textAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>caixaExclusao</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcExclusionBoxTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Valor do campo 'id'   identificador do registro que vair ser Editado/Exclu√≠do.(EL=true) Ex: item.idAux EL=True, indica que o atributo usar√° Linguagem de Express√£o</description>
   <name>valorChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.</description>
   <name>selected</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the text value of the checkbox.</description>
   <name>text</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to this checkbox.
          For accessibility reasons, this functionality is not supported in
          screen reader mode.
          &lt;p&gt;
            If the same access key appears in multiple locations in the
            same page of output, the rendering user agent will cycle
            among the elements accessed by the similar keys.
          &lt;/p&gt;&lt;p&gt;
            This attribute is sometimes referred to as the "mnemonic".
          &lt;/p&gt;&lt;p&gt;
            The character specified by this attribute
            &lt;strong&gt;must&lt;/strong&gt;exist in the
            &lt;code&gt;text&lt;/code&gt;attribute of this selectBooleanCheckbox instance.
            If it does not, the user will receive no visual indication of
            the existence of the accessKey.
            &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
          and "accessKey" attributes from a single value, using
          conventional ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the text to "Text" and the access key to 'e'.
          &lt;/p&gt;&lt;/html&gt;</description>
   <name>textAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>numerico</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcNumericTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>N√∫mero de casas decimais</description>
   <name>numCasas</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informar caso queira alterar a mensagem padr√£o de pr√©-valida√ß√£o de 'formato' do campo. O formato √© o informado na propriedade formato. Ex: minha.msgErro</description>
   <name>msgErro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
   <name>wrap</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
   <name>secret</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component:
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker,
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes.
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <name>radio</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcRadioTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>chavePrimaria</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>dominio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n.  Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica que a propriedade faz parte da chave prim√°ria da classe. Ex: N</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Se o objeto for indexado √© o indice da linha corrente Ex: index + 1</description>
   <name>somenteLeitura</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N)Indica se o campo permite altera√ß√£o de seu valor. Ex: S</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label for an additional item that indicates no selection has
been made.  When the user selects this item, "required" validation will
not pass, or a null value will be set if the component is not "required".</description>
   <name>unselectedLabel</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the control displays the buttons
              horizontally or vertically.The valid values are "horizontal" and
              "vertical", the default being "vertical".</description>
   <name>layout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client.
        Therefore, when valuePassThru is false,
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set
        valuePassThru to true. This will pass the values through to the client,
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
   <name>valuePassThru</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey,  showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <!-- fim -->
 </tag>
 <tag>
  <name>vinculado</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcAggregateTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>Informa se abrir√° janela em popup ou em modal usando Jquery</description>
   <name>modal</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Informa o delimitador das propriedades na selecao de vinculado</description>
   <name>delimitador</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Caso seja ness√°rio um nome diferente da propriedade para retorno da sele√ß√£o popup, esse nome pode ser definido nesse atributo. Se n√£o for informado, ser√° considerado igual √† propriedade, sem o sufixo _Arg (onde tiver). Usado, p.ex., em casos de dois vinculados do mesmo tipo em uma mesma tela</description>
   <name>propSelPop</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description> Propriedades auxiliares para retorno da popup de sele√ß√£o. 	</description>
   <name>propsSelPop</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> Se o bot√£o limpar do vinculado vai limpar as  propriedades auxili√°res retornadas da popup de sele√ß√£o. S ou N (default)</description>
   <name>limpaPropsSelPop</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> Define se o vinculado em questao podera utilizar Selecao Multipla</description>
   <name>multiSel</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> Define o titulo que ira aparecer no botao de Selecao Multipla</description>
   <name>multiSelTitulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> T√≠tulo para bot√£o que chama a popup.</description>
   <name>tituloBotaoSelPop</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> I18N. T√≠tulo para bot√£o que chama a popup. (default) jcompany.componente.vinculado.label.popup</description>
   <name>tituloChaveBotaoSelPop</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> T√≠tulo para bot√£o limpar. </description>
   <name>tituloBotaoLimpar</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> I18N. T√≠tulo para bot√£o limpar. (default) jcompany.componente.vinculado.label.limpar			</description>
   <name>tituloChaveBotaoLimpar</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description> Se deve ou n√£o mostrar o bot√£o limpar quando tiver valor</description>
   <name>exibeBotaoLimpar</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Se o vinculado compoe a chave primaria S ou N (default)</description>
   <name>chavePrimaria</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo texto que receber√° o retorno da sele√ß√£o popup. Ex: 30</description>
   <name>lookupTamanho</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo id que receber√° o retorno da sele√ß√£o popup. Ex: 30</description>
   <name>idTamanho</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 	0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Se exibe OID (chave numerica) ou somente o campo descritor. Para autoRecuperacaoAutomatica deve ser S Ex: N</description>
   <name>idExibe</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Se o campo OID ser√° somente leitura. Para autoRecuperacaoClasse funcionar deve ser N Ex: N</description>
   <name>idSomenteLeitura</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Se os campos s√£o somente leitura.</description>
   <name>somenteLeitura</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica a classe para auto recupera√ß√£o da classe baseado no atributo especificado em autoRecuperacaoPropriedade. Necess√°rio para edi√ß√£o e recupera√ß√£o autom√°tica da classe agregada. Ex: com.empresa.vo.TipoFuncionarioVO</description>
   <name>autoRecuperacaoClasse</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indica a propriedade utilizada para auto recupera√ß√£o. Se n√£o for especificado, ser√° utilizado id. Ex: nome</description>
   <name>autoRecuperacaoPropriedade</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o  resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Id para o componente span do html que vai ser criado. Este span √© usado nas rotinas javaScript ajax. Ex: meuIdAjax</description>
   <name>ajaxIdUnico</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>M√°ximo de caracteres que poder√° ser digitado para o campo (maxlength) Ex: 20</description>
   <name>tamanhoMaximo</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da aplic√ß√£o a qual o popup vai ser chamado. Se informado, n√£o utiliza a apli√ß√£o base'corrente' Ex: jcurriculo ou minhaaplicacao</description>
   <name>baseActionSel</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Action da Struts a ser chamada pelo link. Ex: usuarioselpopup ou minhaAction</description>
   <name>actionSel</name>
   <required>true</required>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Evento que ser√° utilizado para o popup 'Evento padr√£o do jcompany' abrir,pesquisar etc.. Ex: pesquisar</description>
   <name>evento</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Par√¢metros adicionais a serem adicionados na url('action') Ex: meuparametro1=meuvalor1</description>
   <name>parametro</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Altura da janela popup a ser criada, se n√£o informado a altura ser√° a padr√£o das janelas popup's do jcompany Ex: 600</description>
   <name>alt</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura da janela popup a ser criada, se n√£o informado a largura ser√° a padr√£o das janelas popup's do jcompany Ex: 480</description>
   <name>larg</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Posi√ß√£o da janela  popup a ser criada na coordenada X, se n√£o informado a janela ser√° centralizada. Ex: 100</description>
   <name>posx</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Posi√ß√£o da janela  popup a ser criada na coordenada Y, se n√£o informado a janela ser√° centralizada. Ex: 20</description>
   <name>posy</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n.  Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do t√≠tulo com I18n. Deve ser utilizada preferencialmente √† propridade titulo. Ex: meu.titulo</description>
   <name>tituloChave</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo sem I18n. Usar tituloChave preferencialmente. Ex: Meu T√≠tulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
   <name>wrap</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
   <name>secret</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component:
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker,
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes.
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the inline CSS style for this element</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
   <name>maximumLength</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether previous values of text fields in the form
          should be remembered and offered for auto completion.</description>
   <name>autoComplete</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se utiliza ou n√£o Unobtrusive JavaScript, Outro valor informado substitui o Template de JavaScript default do componente.</description>
   <name>riaUsa</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <description>The inputFile component is a component that can
          be used to upload a file.  It supports displaying a label,
          text, and messages.</description>
  <name>arquivoAnexado</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcInputFileTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>T√≠tulo Chave</description>
   <name>tituloChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Titulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Largura em caracteres do campo de entrada. Ex: 20</description>
   <name>tamanho</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(S ou N) Indica se a propriedade √© de preenchimento obrigat√≥rio, se n√£o informado o valor √© N Ex: S</description>
   <name>obrigatorio</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(null ou N) Indica se √© para destacar o fundo de campos obrigatorios em cinza escuro, se n√£o informado o padr√£o √© destacar Ex: N</description>
   <name>obrigatorioDestaque</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Equivalente ao colspan do HTML. O default √© 1. Se informado como 0 (Zero), as tags td e /td n√£o s√£o renderizadas. Para mesclar duas colunas, deve-se informar 2, e assim por diante. Ex: 1</description>
   <name>colunas</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!-- 
    <attribute>
      <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
      <name>bundle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    
  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when text becomes selected.</description>
   <name>onselect</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The size of the text control specified by the number of characters shown.The default value depends on the browser.</description>
   <name>columns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;An attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" willset the label to "Text" and the access key to 'e'.&lt;/html&gt;</description>
   <name>labelAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt; For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. &lt;p&gt; This attribute is sometimes referred to as the "mnemonic". &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the component is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <description>O commandButton controle cria um bot√£o representando um UIXCommand  com a a√ß√£o de download</description>
  <name>botaoAcaoDownload</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcDownloadButtonTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>the identifier for the component</description>
   <name>id</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>acao</description>
   <name>acao</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>destino</description>
   <name>destino</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>label</description>
   <name>label</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>botaoArrayID</description>
   <name>botaoArrayID</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>ajaxUsa</description>
   <name>ajaxUsa</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>urlIcone</description>
   <name>urlIcone</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>hotKey</description>
   <name>hotKey</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>java.lang.String</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>true ou false, indicando se deve ou n√£o ser validado o formulario. Default:true</description>
   <name>validaForm</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>true ou false, indicando se deve ou n√£o ser validado o formulario. Default:true</description>
   <name>limpaForm</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Evento onClick</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad 
 
    <attribute>
      <description>&lt;html&gt;the identifier for the component.  The identifier
		must follow a subset of the syntax allowed in HTML:
		&lt;ul&gt;
		&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
		&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
		&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
		&lt;/ul&gt;&lt;/html&gt;</description>
      <name>id</name>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
     -->
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.</description>
   <name>action</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>java.lang.String myMethod()</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to an action listener</description>
   <name>actionListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ActionEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
   <name>returnListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.ReturnEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a launch listener</description>
   <name>launchListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.LaunchEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the textual label of the button.</description>
   <name>text</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the button should be disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>textAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the
              same page of output, the rendering user agent will cycle among
              the elements accessed by the similar keys. Note that user agents
              are inconsistent about dealing with two links having same access
              key, and so the cycling behavior is dependent on what the user agent
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.</description>
   <name>partialSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>If set to TRUE the component will start blocking user input when the
     action is initiated. The blocking will stop when a response is received
     from the server.</description>
   <name>blocking</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>An URL to an image to use for an icon displayed in the button.</description>
   <name>icon</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!-- 
    <attribute>
      <description>an onclick Javascript handler.</description>
      <name>onclick</name>
      <deferred-value/>
    </attribute>
    -->
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Indicates whether processes launched by this command should be
        launched in a secondary dialog window. 'useWindow' requires that the "action"
        attribute start with "dialog:". Set useWindow to 'false' for the outcome of
        the action to be targeted to the existing window.</description>
   <name>useWindow</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Height of the window, if this command is used to launch a window.</description>
   <name>windowHeight</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Width of the window, if this command is used to launch a window.</description>
   <name>windowWidth</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <description>Tag para renderizar hiperlinks inteligentes</description>
  <name>linkInteligente</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcSmartLinkTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>URL contendo somente parte ap√≥s /f/t/ sem barra inicial, da URL alvo do link</description>
   <name>link</name>
   <required>true</required>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Alvo do link</description>
   <name>alvo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>T√≠tulo Chave</description>
   <name>tituloChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Titulo</description>
   <name>titulo</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Chave do texto da ajuda com I18n. Ex: minha.ajuda</description>
   <name>ajudaChave</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Texto da ajuda. Ex: minha ajuda</description>
   <name>ajuda</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Nome da Classe de estilo (CSS) para o componente Ex: 'titulo' ou minhaClasseCSS</description>
   <name>classeCSS</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>(true ou false) Deve conter uma express√£o JSTL cuja avalia√ß√£o resultar√° em true para exibi√ß√£o do conte√∫do ou false, para a n√£o-exibi√ß√£o. Importante: as tags de contorno (td) s√£o sempre renderizadas. Ex: empty form.map.nome ou minhaExpressaoJSTL</description>
   <name>exibeSe</name>
   <rtexprvalue>true</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Arquivo de Resources para I18N. Se n√£o for informado o padr√£o ser√° ApplicationResources</description>
   <name>bundle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!--  jCompany 5 daqui para frente sao tags originais do trinidad -->
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set.
              For accessibility reasons, this functionality is not supported in
              screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt; An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
   <name>valueAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the ID of the component that this component
refers to</description>
   <name>for</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <description>Componente utilizado nas l√≥gicas de prefer√™ncia de pele e layout</description>
  <name>selectPreferencia</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcSelectPreferenciaTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>the identifier for the component</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>Prefer√™ncia a ser utilizada</description>
   <name>preferencia</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <!-- 
    <attribute>
      <description>&lt;html&gt;the identifier for the component.  The identifier
		must follow a subset of the syntax allowed in HTML:
		&lt;ul&gt;
		&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
		&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
		&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
		&lt;/ul&gt;&lt;/html&gt;</description>
      <name>id</name>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    -->
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
		bean.  This can be used to give programmatic access to a component
		from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
   <name>value</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a converter object</description>
   <name>converter</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.convert.Converter</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
   <name>immediate</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
   <name>required</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to a validator method</description>
   <name>validator</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>a method reference to a value change listener</description>
   <name>valueChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(javax.faces.event.ValueChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
   <name>requiredMessageDetail</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.</description>
   <name>selected</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
   <name>contentStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
   <name>autoSubmit</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is read-only.</description>
   <name>readOnly</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>whether the element is disabled.</description>
   <name>disabled</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the label of the bean.</description>
   <name>label</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
   <name>simple</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>the text of the radio button.</description>
   <name>text</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 Character used to gain quick access to this radio button.
          For accessibility reasons, this functionality is not supported in
          screen reader mode.
          &lt;p&gt;
            If the same access key appears in multiple locations in the
            same page of output, the rendering user agent will cycle
            among the elements accessed by the similar keys.
          &lt;/p&gt;&lt;p&gt;
            This attribute is sometimes referred to as the "mnemonic".
          &lt;/p&gt;&lt;p&gt;
            The character specified by this attribute
            &lt;strong&gt;must&lt;/strong&gt;exist in the
            &lt;code&gt;text&lt;/code&gt;attribute of this CheckBox instance.
            If it does not, the user will receive no visual indication of
            the existence of the accessKey.
            &lt;/p&gt;&lt;/html&gt;</description>
   <name>accessKey</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>char</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
          and "accessKey" attributes from a single value, using
          conventional ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the text to "Text" and the access key to 'e'.
          &lt;/p&gt;&lt;/html&gt;</description>
   <name>textAndAccessKey</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <name>group</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>event handler for when the value is changed.</description>
   <name>onchange</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onblur</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
   <name>onfocus</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
   <name>showRequired</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
 </tag>
 <tag>
  <description>The panelFormLayout lays out input form controls, such that their labels and fields line up vertically.  The children of this component are input controls, they are inputText, inputHidden, inputFile, inputColor, inputListOfValues, inputDate, selectBooleanCheckBox, selectBooleanRadio, selectOneChoice, selectOneListBox, selectOneRadio, selectManyListBox and panelLabelAndMessage.  These components must have their "simple" attribute set to false (the default).  For cases where other controls are required inside panelFormLayout, wrap them in a panelLabelAndMessage.

This component can be used to lay out multiple columns using the rows attribute.  The children are laid out down and then across.  Note that this layout is not a table layout so there is no overall table row.  Instead, rows are unique per column; in one column a row may consume more vertical space than a nearby row in another column.

The panelFormLayout is an example of one of the components that has support for grouping its children components.
If you place panelFormLayout child items inside of a group, separators will be drawn around the group of form items if adjacent to other form items (separators won't be drawn at the top if the group is the first item in the column or, similarly, at the bottom if the group is the last item in the column).
Grouped panelFormLayout items are kept in the same column of the panelFormLayout even when the assigned rows attribute is set to a value smaller than the number of items in the group.
The panelFormLayout component also supports the group component in its footer facet so you can place more than one item in the footer.  You can even group footer items one additional time to get separators to appear.</description>
  <name>panelFormLayout</name>
  <tag-class>com.powerlogic.jcompany.view.jsf.tag.PlcPanelFormLayoutTag</tag-class>
  <body-content>JSP</body-content>
  <attribute>
   <description>C√≥digo javascript a ser executado no momento em que se tabula no √∫ltimo campo dentro da tabela. Renderiza uma linha (tr) adicional, com campo de tamanho/largura 0, que dispara o c√≥digo declarado no seu 'onfocus'</description>
   <name>aoSair</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
   <name>id</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client).</description>
   <name>rendered</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>boolean</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
   <name>binding</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>javax.faces.component.UIComponent</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
   <name>attributeChangeListener</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-method>
    <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
   </deferred-method>
  </attribute>
  <attribute>
   <description>the CSS styles to use for this component.</description>
   <name>inlineStyle</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>a CSS style class to use for this component.</description>
   <name>styleClass</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
   <name>shortDesc</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>the IDs of the components that should trigger a partial update.
        &lt;p&gt;
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.&lt;/p&gt;
        &lt;p&gt;
        Separate multiple triggers with a space. e.g., partialTriggers="cmp1 cmp2"
        &lt;/p&gt;
        &lt;p&gt;
        Identifiers must account for NamingContainers.  You can use a single colon to start the search from the root,
        or use multiple colons to move up through the NamingContainer. For example,
        "::" will pop out of this component's naming container (it pops out of itself if it is a naming container), 
        ":::" will pop out of two naming containers, etc. The search for
        the partialTrigger begins from there. e.g., partialTriggers=":::commandButton1" the search begins for the 
        component with id = commandButton1 after popping out of two naming containers relative to this component.
        To go into naming containers, you separate the naming containers with ':', e.g.,partialTriggers= "nc1:nc2:nc3:componentId".&lt;/p&gt;</description>
   <name>partialTriggers</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onclick Javascript handler.</description>
   <name>onclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an ondblclick Javascript handler.</description>
   <name>ondblclick</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousedown Javascript handler.</description>
   <name>onmousedown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseup Javascript handler.</description>
   <name>onmouseup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseover Javascript handler.</description>
   <name>onmouseover</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmousemove Javascript handler.</description>
   <name>onmousemove</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onmouseout Javascript handler.</description>
   <name>onmouseout</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeypress Javascript handler.</description>
   <name>onkeypress</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeydown Javascript handler.</description>
   <name>onkeydown</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>an onkeyup Javascript handler.</description>
   <name>onkeyup</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The preferred width of the field.  Usually a percentage, but may be specified as either a percentage or an absolute number of pixels.  If the width is not specified, it will default appropriately.  If specified as a percentage the labelWidth plus the fieldWidth should add up to 100%, regardless of the number of columns.  If the fieldWidth is specified and is a percentage the labelWidth will be derived appropriately if not specified.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
   <name>fieldWidth</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>The preferred width of the label.  Usually a percentage, but may be specified as either a percentage or an absolute number of pixels.  If the width is not specified, it will default appropriately.  If specified as a percentage the labelWidth plus the fieldWidth should add up to 100%, regardless of the number of columns.  If the labelWidth is specified and is a percentage the fieldWidth will be derived appropriately if not specified.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
   <name>labelWidth</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
  <attribute>
   <description>Sets the maximum number of columns to show.  This attribute defaults to 3 and 2 on PDAs.  If this panelFormLayout is inside of another panelFormLayout, this will always be 1.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
   <name>maxColumns</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>Sets the number of rows after which to start a new column.  This attribute defaults to Integer.MAX_VALUE.  The number of rows actually rendered depends also on the "maxColumns" property.  If the children will not fit in the given number of rows and columns, the number of rows will increase to accomodate the children.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
   <name>rows</name>
   <rtexprvalue>false</rtexprvalue>
   <deferred-value>
    <type>int</type>
   </deferred-value>
  </attribute>
  <attribute>
   <description>The alignment of label prompts for the form items.</description>
   <name>labelAlignment</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
</taglib>
